#    The following TLEs (Two-Line Elements) were generated by fitting
# a numerically-integrated ephemeris,  based on the orbit given below,
# to the SDP4/SGP4 models.  Each TLE is good for the interval between
# its epoch and the epoch of the subsequent TLE (usually one day).
# The maximum deviation between the numerically integrated ephemerides
# and the TLE-based ephemeris, in kilometers,  is given for each TLE
# as the "worst residual".
#
#    This fitting is done using the 'eph2tle' code packaged with Find_Orb.
# The code has details on how the TLEs were computed :
#
#    https://github.com/Bill-Gray/find_orb/eph2tle.cpp
#
#    Be warned:  the error given is that between the numerically
# integrated ephems and the TLE model.  There will usually be at
# least some additional difference between the ephems and the actual
# motion of the satellite,  especially if the ephemerides are based
# on a short arc.  If the following orbital elements say something
# like "[based on] 10 observations 2015 Jan. 1-13",  and the TLEs
# are for 2015 May,  the extrapolation may be tenuous at best.  If
# your application requires a specific level of accuracy,  you may
# want to contact me;  I can give you some idea as to the fit of the
# underlying data (and possibly TLEs based on newer data).
#
#    For certain objects,  I use an alternative model in which most of
# the traditional TLE data is replaced by six signed 8-digit hex numbers.
# These six numbers are a state vector,  numerically integrated using
# a simplified force model.  This is necessary for objects at L2 or L1,
# and sometimes for objects in high orbits where the SDP4/SGP4 model
# fails.  I'll be posting source code for this.  But be aware:  it's my
# own extension,  doesn't work with other code,  and is therefore used
# only when necessary.
#
#    Note that for some cases,  the fit to SDP4/SGP4 fails,  and the
# "worst residual" is thousands or even hundreds of thousands of kilometers.
# (This usually happens near perigee for highly eccentric objects.)  In
# such cases,  we pretty much just have to throw up our hands and say
# that we can't use TLEs.  (Which is why I developed the above state
# vector version.)
#
#    Also,  if you use a TLE outside the "correct" time range (between
# its epoch and that of the next epoch),  all bets are off.  It usually
# seems to be a decent fit,  at least for a while,  but I don't
# recommend doing it.
#
